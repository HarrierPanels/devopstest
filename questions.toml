[basicnetworking]
label = "Basic networking Demo"

    [[basicnetworking.questions]]
    question = "Which addresses in any IPv4 network are always reserved"
    answers = ["network address", "broadcast address for this network"]
    alternatives = [
        "first available address for default gateway",
        "last available address for default gateway",
        "each odd address for better balancing",
    ] 
    hint = "In IPv4 there are two IPs that cannot be assigned\n      to any devices."
    explanation = """
    Each network or subnet has a reserved broadcast address 
    that can be used by all participants of the network to 
    send a broadcast. Broadcasts allow information and services 
    to be transmitted to all devices and components of the 
    network without the need to know their individual IP 
    addresses. 
        
    Among other things, routers in a local area network use 
    the broadcast IP to send HELLO packets to all endpoints, 
    switches, and other routers to maintain interrelationships 
    on the network and discover neighboring devices. These are 
    the Network ID and the Broadcast IP address.
    """
   
    [[basicnetworking.questions]]
    question = "Which of the following address ranges are private"
    answers = ["172.16.0.0/12", "10.0.0.0/8", "192.168.0.0/16"]
    alternatives = [
        "1.1.1.0/30", 
        "127.0.0.0/24", 
        "169.254.0.0/16", 
        "193.168.255.0/24",
    ]
    hint = "There are three private address ranges."
    explanation = """
    Address ranges to be used by private networks are:
        
    Class A: 10.0.0.0 to 10.255.255.255
    Class B: 172.16.0.0 to 172.31.255.255
    Class C: 192.168.0.0 to 192.168.255.255
    """
    
[networkprotocols]
label = "Network Protocols Demo"

    [[networkprotocols.questions]]
    question = "Choose the correct statement: "
    answers = ["The ARP protocol is supposed to determine the MAC address\n     based on the IP address"]
    alternatives = [
        "ARP is running on port 53", 
        "ARP is used in both IPv4 and IPv6 networks", 
        "ARP protocol is designed to determine the IP address\n     based on the MAC address",
    ] 
    hint = "ARP works between Layers 2 and 3 of the OSI model."
    explanation = """
    Address Resolution Protocol (ARP) is a procedure for mapping a dynamic
    IP address to a permanent physical machine address in a local area 
    network (LAN). The physical machine address is also known as a media 
    access control (MAC) address.
    """
    
    [[networkprotocols.questions]]
    question = "The set SYN flag indicates that: "
    answers = ["the client and server go through the 'handshake' phase,\n     establishing the connection"]
    alternatives = [
        "the server waits for the data segment with the number of the first\n     byte specified in the Sequence number field", 
        "the server waits for the data segment with the number of the first\n     byte specified in the Acknowledgment number field", 
        "the client and server are ready to transmit data segments",
    ] 
    hint = "SYN (synchronize): Packets that are used to initiate\n      a connection."
    explanation = """
    SYN and ACK TCP flags are used for TCP 3 way handshake to establish 
    connections. SYN (Synchronize sequence number). This indicates that 
    the segment contains an ISN. During the TCP connection establishment 
    process, TCP sends a TCP segment with the SYN flag set. Only the first 
    packet from both the sender and receiver should have this flag set.
    """

[subnetting]
label = "Concept of Subnetting Demo"

    [[subnetting.questions]]
    question = "Formula for calculating the number of available host\naddresses in a subnet is: "
    answers = ["2^(32-n)-2"]
    alternatives = ["2*n+32", "n^2 +1", "2^32-n"] 
    hint = "n = prefix"
    explanation = """
    In simple words the number of hosts in any network can be calculated 
    with the formula = 2^x â€“ 2, where x is the number of host ID bits in 
    the IP address that equals 32 - n(prefix).  
    """

    [[subnetting.questions]]
    question = "The last byte of the network IP address is 160,\nthe last byte of the subnet mask is 224.\nCalculate the last byte of the broadcast address for this subnet"
    answers = ["191"]
    alternatives = ["192", "161", "159"] 
    hint = "for .224 mask prefix is /27"

    [[subnetting.questions]]
    question = "What does VLSM stand for"
    answers = ["Variable Length Subnet Mask"]
    alternatives = [
        "Virtual Local Subnet Management", 
        "Visual Localization Service Marker", 
        "Virtual LAN Subnet Management",
    ] 
    explanation = """
    VLSM stands for Variable Length Subnet Mask where the subnet design 
    uses more than one mask in the same network which means more than 
    one mask is used for different subnets of a single class A, B, C 
    or a network. 
    
    It is used to increase the usability of subnets as they can be of 
    variable size. It is also defined as the process of subnetting 
    of a subnet.   
    """

    [[subnetting.questions]]
    question = "The administrator has five departments to manage. These are\nsales department with [85] computers, purchase department with\n[30] computers, development department with [5] computers,\naccounts department with [10] computers and management department\nwith [60] computers.\n\nThere are also three WAN links that require two subnetworks with [2]\nhosts each. The administrator has IP 192.168.1.0/24, department wise.\nHe splits the network internally into subnetworks, so that each\nsubnetwork can be used by a single department. What would be the range\nfor host IPs used by the accounts department"
    answers = ["192.168.1.225 - 192.168.1.238"]
    alternatives = [
        "192.168.1.10 - 192.168.1.20", 
        "192.168.1.220 - 192.168.1.223", 
        "192.168.1.211 - 192.168.1.224",
    ] 
    hint = "192.168.1.0/24 has 256 IPs available. Possible IP\n      segments: 128, 64, 32, 16, 8, 4."
    explanation = """
    For each segment select the block size that is greater than 
    or equal to the actual requirement which is the sum of host 
    addresses, broadcast addresses and network addresses. Make 
    a list of subnets/IPs possible: /25 - 128 IPs, /26 - 64, 
    /27 - 32, /28 - 16, /29 - 8, /30 - 4 (two subnets).
    
    Arrange all the segments in descending order based on the
    block size that is from highest to lowest requirement. The
    highest IP available has to be allocated to highest
    requirement so the sales department gets 192.168.1.0/25
    which has 126 valid addresses that can easily be available
    for 85 hosts. The subnet mask used is 255.255.255.128.
    
    The next segment requires an IP to handle 60 hosts. The IP 
    subnet with network number 192.168.1.128/26 is the next 
    highest which can be assigned to 62 hosts thus fulfilling 
    the requirement of development department. The subnet mask 
    used is 255.255.255.192 and so forth.
    """

[vlan]
label = "Virtual LAN Demo"

    [[vlan.questions]]
    question = "The total number of VLANs is: "
    answers = ["4096"]
    alternatives = ["256", "1024", "65535"] 

    [[vlan.questions]]
    question = "Choose the correct statement: "
    answers = [
        "VLANS are mutually isolated, and packets can only\n     pass between them through a router",
        "Each VLAN is a broadcast domain, usually with its own\n     IP network",
    ]
    alternatives = [
        "The device belongs to the VLAN solution only\n     by the port to which it is connected", 
        "VLAN is the same as VPN",
    ] 
    explanation = """
    Each VLAN is an individual broadcast domain because a broadcast 
    in a given VLAN will never reach any ports in other VLANs. 
    Normally, a port carries traffic only for the single VLAN 
    to which it belongs. For a VLAN to span multiple switches on 
    a single connection, a trunk is required to connect two switches. 
    """

[dhcp]
label = "DHCP Demo"

    [[dhcp.questions]]
    question = "What type of request is used to obtain an address via DHCP"
    answers = ["broadcast"]
    alternatives = ["multicast", "unicast", "anycast"] 
   
    [[dhcp.questions]]
    question = "What is the destination IP address in the DHCPDISCOVER packet"
    answers = ["255.255.255.255"]
    alternatives = ["192.168.0.255", "0.0.0.0", "192.168.0.1"]    
       
    [[dhcp.questions]]
    question = "What identifier does the DHCP server use to reserve\nan IP address for the client"
    answers = ["MAC address of the network adapter of client\n     computer"]
    alternatives = [
        "Network interface name of the client computer", 
        "Computer name of the client computer", 
        "All choices",
    ]    

    [[dhcp.questions]]
    question = "When a computer sends DHCP requests and does not\nreceive a response, from which subnet does the computer\nautomatically generate an IP address"
    answers = ["169.254.0.0/16"]
    alternatives = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"] 

[dns]
label = "DNS Demo"
 
    [[dns.questions]]
    question = "What are the DNS Records types"
    answers = ["A", "NS", "AAAA", "SOA"]
    alternatives = ["MAIL", "COMP", "BBBB"] 

    [[dns.questions]]
    question = "What is the DNS Record used as a 'reverse record'"
    answers = ["PTR"]
    alternatives = ["A", "NS", "SOA", "CNAME"] 
    hint = "For mapping IP addresses to domain names."

    [[dns.questions]]
    question = "What is the nameserver that contains information specific\nto the domain name it serves"
    answers = ["Authoritative nameserver"]
    alternatives = ["Recursive resolver", "Root nameserver", "TLD nameserver"] 
    hint = "When a recursive resolver receives a response from\n      a TLD nameserver, that response will direct the resolver to\n      that nameserver."
    explanation = """
    The authoritative nameserver is usually the resolverâ€™s last 
    step in the journey for an IP address. The authoritative 
    nameserver contains information specific to the domain name 
    it serves (e.g. google.com) and it can provide a recursive 
    resolver with the IP address of that server found in the DNS 
    A record, or if the domain has a CNAME record (alias) it will 
    provide the recursive resolver with an alias domain, at which 
    point the recursive resolver will have to perform a whole new 
    DNS lookup to procure a record from an authoritative nameserver 
    (often an A record containing an IP address). Cloudflare DNS 
    distributes authoritative nameservers, which come with Anycast 
    routing to make them more reliable. 
    """

    [[dns.questions]]
    question = "What is the DNS Record that maps a domain name\nto a list of mail exchange servers"
    answers = ["MX"]
    alternatives = ["A", "NS", "PTR", "CNAME", "MAILEX"] 
    
    [[dns.questions]]
    question = "Choose the correct sequence of queries to DNS servers\nto resolve a domain name"
    answers = ["Client - Recursive resolver - Root- TLD - Authoritative"]
    alternatives = [
        "Client - Root- TLD - Recursive resolver - Authoritative", 
        "Client - TLD - Root- Recursive resolver - Authoritative", 
        "Client - Recursive resolver - Authoritative - Root- TLD",
    ]  

    [[dns.questions]]
    question = "DNS is an acronym for: "
    answers = ["Domain Name System"]
    alternatives = [
        "Domain Name Servers", 
        "Domain Name Service", 
        "Domain Name Security",
    ]   

[linux]
label = "CentOS Linux Demo"

    [[linux.questions]]
    question = "Please check Linux distributions in the following OS list: "
    answers = ["CentOS", "Ubuntu", "RHEL"]
    alternatives = ["Microsoft Windows", "MacOS"] 

    [[linux.questions]]
    question = "What is CentOS default package manager"
    answers = ["yum"]
    alternatives = ["apts", "apk", "brew"] 

    [[linux.questions]]
    question = "Which of the following could be configured during CentOS installation"
    answers = ["All choices"]
    alternatives = ["network", "users", "disk partitioning", "time", "language"] 

    [[linux.questions]]
    question = "What steps are involved in creating an SSH session"
    answers = [
        "Client contacts server to initiate a connection", 
        "The server responds by sending the client a public cryptography\n     key.", 
        "The server negotiates parameters and opens a secure channel for\n     the client.", 
        "The user, through their client, logs into the server.",       
    ]
    alternatives = [
        "The remote client generates a new ssh key pair to ensure the\n     encrypted connection.", 
        "Once an SSH client contacts a server it is prompted to change\n     the SSH key password.",      
    ]
    explanation = """
    Event Sequence of an SSH Connection:
    
    A cryptographic handshake is made so that the client can 
    verify that it is communicating with the correct server.

    The transport layer of the connection between the client 
    and remote host is encrypted using a symmetric cipher.

    The client authenticates itself to the server.

    The remote client interacts with the remote host over 
    the encrypted connection.  
    """  

[bash]
label = "Bash Demo"

    [[bash.questions]]
    question = "How many lines with Hello are in output:\ngreet() { for i in `seq $1`; do echo Hello $i; done } && greet '2 5'"
    answers = ["4"]
    alternatives = ["2", "3", "5", "An error is displayed"] 
    hint = "seq prints a sequence of numbers"
    explanation = """
    seq command is used to print a sequence of numbers from FIRST to LAST 
    in steps of INCREMENT. By default, each number is printed on a separate 
    line.
    """

    [[bash.questions]]
    question = "Command used to count the number of characters in a file is: "
    answers = ["wc"]
    alternatives = ["word", "char", "numchar"] 

    [[bash.questions]]
    question = "I want to monitor a continuously updating log file. What command\ncan be used to most efficiently achieve this"
    answers = ["tail â€“f filename"]
    alternatives = [
        "grep -v grep filename", 
        "less filename", 
        "cat filename", 
    ] 
    explanation = """
    tail â€“f filename will cause only the default last 10 lines to be 
    displayed on std output which continuously shows the updating part 
    of the file. 
    """

    [[bash.questions]]
    question = "I want to read all input to some command from file1, direct all\noutput to file2, and error to file 3, how can I achieve this"
    answers = ["command < file1 1>file2 2>file3"]
    alternatives = [
        "command output='file1' input='file2' error='file3'", 
        "command (file1 file2 file3) + (output, input, error)", 
        "command echo $(output='file1', input='file2', error='file3')", 
    ] 

    [[bash.questions]]
    question = "How will you emulate wc â€“l using awk"
    answers = ["awk 'END {print NR}' filename"]
    alternatives = [
        "awk '{print}' filename", 
        "awk '{print $1}' filename", 
        "awk '{print $NF-1}' filename", 
    ] 

    [[bash.questions]]
    question = "How would you find the total disk space used by user1"
    answers = ["du -s /home/user1"]
    alternatives = [
        "df -h user1", 
        "free /home/user1", 
        "dsk -sp user1", 
    ] 

    [[bash.questions]]
    question = "Which of the following will give 4 lines with the 'echo output'"
    answers = [
        "for i in 1 2 3 4; do echo 'echo output'; done",
        "for i in {1 2 3 4}; do echo 'echo output'; done",
        "for i in [1 2 3 4]; do echo 'echo output'; done",
    ]
    alternatives = [
        "for i in (1 2 3 4); do echo 'echo output'; done", 
        "for i in {array[1 2 3 4]}; do echo 'echo output'; done", 
        "for i in $(1 2 3 4); do echo 'echo output'; done", 
        "for i in (1, 2, 3, 4); do echo 'echo output'; done",   
        "for i in '1 2 3 4'; do echo 'echo output'; done",         
    ]

    [[bash.questions]]
    question = "What will be the output for the command in the terminal: echo $0"
    answers = ["the name of the current shell"]
    alternatives = [
        "You will get an error message", 
        "An empty line", 
        "The zero argument entered",       
    ]
    explanation = """
    If the $0 special variable is used within a Bash script, it can be 
    used to print its name and if it is used directly within the terminal, 
    it can be used to display the name of the current shell. 
    """
    
    [[bash.questions]]
    question = "The following is entered in the Bash terminal:\nset -- a b c 4 && for i in 3 4 0 5; do echo ${!i}; done\nWhat will be the output"
    answers = ["4 lines (4th is an empty line):\n     c\n     4\n     bash\n     "]
    alternatives = [
        "abc45", 
        "4 lines:\n     a\n     b\n     c\n     4", 
        "Error",       
    ]
    hint = "set --: If no arguments follow this option, then the positional\n      parameters are unset. Otherwise, the positional parameters are\n      set to the arguments, even if some of them begin with a '-'."    
    explanation = """
    The set command in Bash allows you to control the behavior of your 
    scripts by managing specific flags and properties. These safeguards 
    guarantee that your scripts are on the right track and that Bash's 
    odd behavior does not cause problems. 
    """

    [[bash.questions]]
    question = "How will you emulate: cat filename"
    answers = ["while read line; do echo $line; done < filename"]
    alternatives = [
        "read filename", 
        "for i in filename; do echo filename; done < filename", 
        "printf filename", 
        "export filename",        
    ]  

    [[bash.questions]]
    question = "The following is entered in the terminal:\nread -r a b c <<< 'John Do 123 Main Str' && echo $c\nWhat will be the output"
    answers = ["123 Main Str"]
    alternatives = [
        "Str", 
        "John Do 123 Main Str", 
        "Error message", 
        "c",  
        "An empty line",          
    ] 
    hint = "A here string is used: <<<"
    explanation = """
    A here string can be considered as a stripped-down form 
    of a here document. It consists of nothing more than 
    COMMAND <<< $WORD, where $WORD is expanded and fed to the 
    stdin of COMMAND. 
    """
    
    [[bash.questions]]
    question = "The following is entered in the terminal:\ntouch file && [ -f file ] && echo 'Output 1' || echo 'Output 2'\nWhat will be the output"
    answers = ["Output 1"]
    alternatives = [
        "Output 2", 
        "Error message", 
        "An empty line",          
    ] 
    explanation = """
    [ -f file ] returns true if the file 'file' exists. 
    """

    [[bash.questions]]
    question = "A script file is created with the following code:\n#!/bin/bash\n\nIFS=$'\\n'\nfor i in $(cat /etc/passwd); do\necho $i\ndone\n\nWhat will be the output after the script execution"
    answers = ["The same as cat /etc/passwd line by line"]
    alternatives = [
        "Each character from the passwd file will be printed on\n     a separate line.", 
        "Error message", 
        "An empty line",          
    ]
    hint = "\\n is the escape sequence for a newline, so IFS ends up\n      being set to a single newline character."    
    explanation = """
    IFS stands for "internal field separator". It is used by the shell 
    to determine how to do word splitting, i. e. how to recognize word 
    boundaries.
    """

[git]
label = "Version Control withÂ GIT Demo"

    [[git.questions]]
    question = "Which command do you need to use to specify your user.name\nand user.email in git"
    answers = ["git config"]
    alternatives = ["git uname", "git status", "git settings"] 

    [[git.questions]]
    question = "What command can be used to 'pull' the changes from the remote\nrepository to the local one"
    answers = ["git pull"]
    alternatives = ["git get", "git update", "git push"] 

    [[git.questions]]
    question = "What combination of commands in git bash will be the right one\nto add a new file to index, commit and submit to github"
    answers = ["git add, git commit, git push"]
    alternatives = ["git index, git commit, git push", "git commit, git pull", "git commit, git push"] 
    hint = "Start by adding changes to index using the\n      git add command."    
    explanation = """
    First you add files through add, then commit and synchronize the 
    local repository with the remote git push. 
    """

    [[git.questions]]
    question = "The file .git/refs/heads/master contains the following text:\n'5c2fdbaff3b0b9b5eae3c48047aafcee2201e5c4'. What does it mean"
    answers = ["This is sha1 of the last commit in the master branch"]
    alternatives = [
        "This is an unchanged checksum of the master branch", 
        "This is a blob corresponding to the last commit in the master\n     branch", 
        "This is a random number generated for the master branch when it\n     was created", 
    ]  
    hint = "This is not a random number."  
    explanation = """
    If you have the hash for a commit, you can use the git show command 
    to display the changes for that single commit. The output is identical 
    to each individual commit when using git log -p. 
    """

    [[git.questions]]
    question = "What do the directory names in the .git / objects folder mean"
    answers = ["The first two characters from sha1"]
    alternatives = [
        "Version of the object (the higher the number, the younger\n     the version)", 
        "Version of the object (the higher the number, the older\n     the version)", 
        "Nothing, this is a random value generated by git", 
    ] 

    [[git.questions]]
    question = "How to get rid of all unknown git files"
    answers = ["git clean"]
    alternatives = ["git remove-all", "git clear", "git purge"] 

    [[git.questions]]
    question = "You made a commit and forgot to add a couple of changes. The task is\nto add data to the already created commit. Choose all solutions: "
    answers = ["git commit --amend", "git gui, then I will select the amend last commit checkbox"]
    alternatives = ["git update", "git add", "git reset --hard HEAD^^"] 

    [[git.questions]]
    question = "You want to delete the last commit by placing its contents in the file\nsystem. Which command will accomplish this task"
    answers = ["git reset --mixed HEAD~1"]
    alternatives = ["git reset --hard HEAD~1", "git reset --hard HEAD^^", "git reset --soft HEAD~1"] 

    [[git.questions]]
    question = "What is the best way to remove a commit from a remote repository"
    answers = ["git revert"]
    alternatives = ["git rerere", "git delete -r", "git push -f HEAD~1"] 

    [[git.questions]]
    question = "What will happen to the file song.txt if you call\n'git checkout - song.txt'"
    answers = ["The contents of the file will be restored to the latest known\n     git version"]
    alternatives = [
        "Nothing will happen. Checkout is for changing branches", 
        "The file will be deleted from disk", 
        "We will go to the song.txt branch", 
    ] 

    [[git.questions]]
    question = "What needs to be added to .gitignore to hide all Microsoft Word\nfiles with the extension .doc"
    answers = ["*.doc"]
    alternatives = ["~doc.", "/doc", "!*.doc", "doc", "!*$%"] 

    [[git.questions]]
    question = "How much does branch occupy in the file system"
    answers = ["41 bytes"]
    alternatives = [
        "Proportional to the size of the project. If the project is 10 MB\n     in one branch, then when you create the second, it will become 20 MB.", 
        "1024 Kb", 
    ] 

    [[git.questions]]
    question = "How to view the list of branches in the repository"
    answers = ["git branch --all"]
    alternatives = [
        "git show branch", 
        "git branch show", 
        "git checkout branch", 
    ] 

    [[git.questions]]
    question = "How to exit vi saving changes"
    answers = [":wq"]
    alternatives = [":q!", "Ctrl+S", "Ctrl+C", "doc", "!*$%"] 
    hint = "The necessary commands begin with a colon."  

    [[git.questions]]
    question = "How to resolve a conflict when merging branches (merge conflict)"
    answers = ["Fix the content of files with conflicts, make a commit of changes"]
    alternatives = [
        "Fix the contents of files with conflicts, make git merge --abort", 
        "Use git reset --hard HEAD", 
        "Make a new copy of the project via git clone. This copy is broken\n     and will never work.", 
    ] 
    hint = "First you need to fix the contents of files,\n      where there is a conflict."  
    explanation = """
    You could also use git merge --continue.  
    """

    [[git.questions]]
    question = "You create a new branch 'feature'. Then you make 3 new commits\nin the new branch. Than you return to the master branch and make a new\ncommit there. What kind of merge will happen if you git merge feature\nin the master branch"
    answers = ["Non fast-forward merge"]
    alternatives = ["Fast-forward merge", "Cherry-pick", "The merge is impossible"] 

    [[git.questions]]
    question = "In the master branch you have 3 commits A, B, & C. You create a new\nbranch 'feature'. Then you make 3 new commits in the new branch D, E, & F.\nWhat will be the HEAD pointer of the master branch after\nyou do the merge feature in master"
    answers = ["F"]
    alternatives = ["A", "B", "C", "D", "E", "New commit G"]

    [[git.questions]]
    question = "You are in the feature branch. The project manager asks you to urgently\nfix the defect in the master branch. You have unsaved changes\nthat you are not ready to commit. What will be the procedure"
    answers = ["git stash, git checkout master, fixing the defect, returning to\n     the feature branch"]
    alternatives = [
        "git clean -xdf, git checkout master, fixing the defect, returning to\n     the feature branch", 
        "git add., git checkout master, fixing the defect, returning to\n     the feature branch", 
        "git checkout., git checkout master, fixing the defect, returning to\n     the feature branch", 
    ] 
    hint = "clean -xdf will remove all new files that were made in feature"  
    explanation = """
    Use git stash when you want to record the current state of the working 
    directory and the index, but want to go back to a clean working directory. 
    The command saves your local modifications away and reverts the working 
    directory to match the HEAD commit.  
    """

    [[git.questions]]
    question = "You want to mark the current commit with the tag 'release1.0'.\nWhat is the right command for it in the console"
    answers = ["git tag release1.0"]
    alternatives = ["git --tag release1.0", "git add tag release1.0", "git addtag release1.0"]

    [[git.questions]]
    question = "What is the difference between git stash pop and git stash apply?\nBoth will transfer the changes saved in stash back to the working\ndirectory, but what is the difference"
    answers = ["pop will delete stash after returning the changes saved in it, apply -\n     will leave it"]
    alternatives = [
        "No difference, this is alias. the commands are identical", 
        "apply will remove stash after returning the changes saved in it,\n     pop will leave it", 
        "apply will apply stash to the project, pop - will list available\n     stashes for application", 	
    ] 

    [[git.questions]]
    question = "Which command can help you configure the git so that fetch and push go\nto another remote repository"
    answers = ["git remote"]
    alternatives = ["git repository", "git config", "That is imposible"]

[python]
label = "Python"

    [[python.questions]]
    question = "Which built-in function can get information from the user"
    answers = ["input"]
    alternatives = ["get", "print", "write"]

    [[python.questions]]
    question = "What's the purpose of the built-in zip() function"
    answers = ["To iterate over two or more sequences at the same time"]
    alternatives = [
        "To combine several strings into one",
        "To compress several files into one archive",
        "To get information from the user",
    ]

    [[python.questions]]
    question     = "What does dict.get(key) return if key isn't found in dict"
    answers      = ["None"]
    alternatives = ["key", "True", "False"]

    [[python.questions]]
    question = "How do you iterate over both the indices and elements in an iterable"
    answers = ["enumerate(iterable)"]
    alternatives = [
        "enumerate(iterable, start=1)",
        "range(iterable)",
        "range(iterable, start=1)",
    ]

    [[python.questions]]
    question = "What's the official name of the := operator"
    answers = ["Assignment expression"]
    alternatives = [
        "Named expression",
        "Walrus operator",
        "Colon equals operator",
    ]

    [[python.questions]]
    question = "What's one effect of calling random.seed(42)"
    answers = ["The random numbers are reproducible."]
    alternatives = [
        "The random numbers are more random.",
        "The computer clock is reset.",
        "The first random number is always 42.",
    ]

    [[python.questions]]
    question     = "Which version of Python is the first with TOML support built in"
    answers      = ["3.11"]
    alternatives = ["3.9", "3.10", "3.12"]

    [[python.questions]]
    question     = "How can you run a Python script named epamtest.py"
    answers      = ["python epamtest.py", "python -m epamtest"]
    alternatives = ["python epamtest", "python -m epamtest.py"]
    hint         = "One option uses the filename, and the other uses\n      the module name."

    [[python.questions]]
    question     = "What's the name of the list-like data structure in TOML"
    answers      = ["Array"]
    alternatives = ["List", "Sequence", "Set"]

    [[python.questions]]
    question = "What's a PEP"
    answers = ["A Python Enhancement Proposal"]
    alternatives = [
        "A Pretty Exciting Policy",
        "A Preciously Evolved Python",
        "A Potentially Epic Prize",
    ]
    hint = "PEPs are used to evolve Python."
    explanation = """
    Python Enhancement Proposals (PEPs) are design documents that provide
    information to the Python community. PEPs are used to propose new features
    for the Python language, to collect community input on an issue, and to
    document design decisions made about the language.
    """

    [[python.questions]]
    question = "How can you add a docstring to a function"
    answers = [
        "By writing a string literal as the first statement in the function",
        "By assigning a string to the function's .__doc__ attribute",
    ]
    alternatives = [
        "By using the built-in @docstring decorator",
        "By returning a string from the function",
    ]
    hint = "They are parsed from your code and stored on the\n      function object."
    explanation = """
    Docstrings document functions and other Python objects. A docstring is a
    string literal that occurs as the first statement in a module, function,
    class, or method definition. Such a docstring becomes the .__doc__ special
    attribute of that object. See PEP 257 for more information.
    There's no built-in @docstring decorator. Many functions naturally return
    strings. Such a feature can therefore not be used for docstrings.
    """

    [[python.questions]]
    question = "When was the first public version of Python released"
    answers = ["February 1991"]
    alternatives = ["January 1994", "October 2000", "December 2008"]
    hint = "The first public version was labeled version 0.9.0."
    explanation = """
    Guido van Rossum started work on Python in December 1989. He posted
    Python v0.9.0 to the alt.sources newsgroup in February 1991. Python
    reached version 1.0.0 in January 1994. The next major versions,
    Python 2.0 and Python 3.0, were released in October 2000 and December
    2008, respectively.
    """

    [[python.questions]]
    question = "Which data types used in python"
    answers = ["All choices"]
    alternatives = [
        "Text Types (str)",
        "Boolean Type (bool)",
        "Sequence types (list, tuple, range)",
    ]
    explanation = """
    Python contains Text types, Boolean, and also provides some built-in data 
    types, in particular, dict , list , set and frozenset, and tuple. The str 
    class is used to hold Unicode strings, and the bytes and bytearray classes 
    are used to hold binary data.
    """

    [[python.questions]]
    question = "In order to create a variable should I set its type"
    answers = ["No, but I can specify or change it dynamically with casting"]
    alternatives = [
        "Yes when you create a variable you should provide its type",
    ]
    explanation = """
    Python is a language with dynamic typing, and all variables can be casted 
    to any selected type. 
    """

    [[python.questions]]
    question     = "Which type is ordered, changeable, and allow duplicate values"
    answers      = ["List"]
    alternatives = ["Tuple", "Dictionary", "Set", "All choices"]
    explanation = """
    Lists are one of 4 built-in data types in Python used to store collections 
    of data, the other 3 are Tuple, Set, and Dictionary, all with different 
    qualities and usage. List items are ordered, changeable, and allow 
    duplicate values. List items are indexed, the first item has index [0], 
    the second item has index [1] etc.
    """

    [[python.questions]]
    question     = "Which type could be unpacked"
    answers      = ["All choices"]
    alternatives = ["Tuple", "Dictionary", "Set", "List"]
    explanation = """
    Python allows a tuple (or list) of variables to appear on the left 
    side of an assignment operation. Each variable in the tuple can 
    receive one value (or more, if we use the * operator) from an iterable 
    on the right side of the assignment.  
    
    In the context of unpacking in Python, the ** operator is called the 
    dictionary unpacking operator. The use of this operator was extended by 
    PEP 448. Now, we can use it in function calls, in comprehensions and 
    generator expressions, and in displays.
    
    Finally, we can also use set objects in unpacking operations. However, 
    since sets are unordered collection, the order of the assignments can 
    be sort of incoherent and can lead to subtle bugs. 
    """

    [[python.questions]]
    question = "Which command is used for showing something on screen"
    answers = ["print()"]
    alternatives = [
        "str()",
        "cout()",
        "show()",
    ]

    [[python.questions]]
    question = "Which statements below are true"
    answers = [
        "Using for loop I can get access to each item of the list",
        "Modules can be used to store functions",
        "Python has automatic memory management",        
    ]
    alternatives = [
        "Python nested IF statements are not allowed",
        "Python can't be used in multi-thread computing",
        "Python won't work on linux and macOS",
    ]

    [[python.questions]]
    question     = "Which statement is used for logical expressions and operators"
    answers      = ["If"]
    alternatives = ["For", "While", "Bytes", "Int"]
    explanation = """
    In Python Logical operators are used on conditional statements (either 
    True or False). They perform Logical AND, Logical OR and Logical NOT 
    operations. 
    """

    [[python.questions]]
    question     = "How do you create a copy of the Python list"
    answers      = ["list2 = list1.copy()"]
    alternatives = ["list2 = list1", "list2 = copy(list1)", "copy (list1, list2)", "not possible"]

    [[python.questions]]
    question     = "How do you cast float into integer value but with understanding that\nPython has dynamic typing"
    answers      = ["int(value)"]
    alternatives = ["str(int(value))", "print(int(value)", "it's already a number", "int = float"]

    [[python.questions]]
    question     = "What are the Python disadvantages"
    answers      = ["Speed", "Scripts are required more testing", "Memory consumption"]
    alternatives = ["Hard to understand code", "Incompatibility"]

    [[python.questions]]
    question     = "What are the Python benefits"
    answers      = ["Interpretable", "Interactive", "Ported", "Expandable", "Object oriented"]
    alternatives = ["Difficult"]
    
    [[python.questions]]
    question     = "How to install a Python module"
    answers      = ["pip install <module>"]
    alternatives = ["pip <module>", "pip pull <module>", "python -m pip install <module>", "All choices"]
      
    [[python.questions]]
    question     = "What is part of Python"
    answers      = ["All choices"]
    alternatives = [
        "Dynamic typing",
        "Automatic memory management",
        "Exception Handling",
        "Milti-thread computing",        
    ]   
    
    [[python.questions]]
    question     = "Where can I write Python scripts"
    answers      = ["Any text editor can be used"]
    alternatives = ["Only Pycharm can be used"] 
